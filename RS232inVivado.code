# RS232-receiver-in-VHDL
Implement the RS232 receiver using a finite state machine on FPGA side using VHDL.
library ieee;
use ieee.std_logic_1164.all;
entity uart_rx is
port(clk, rst: in std_logic;
outp: out std_logic_vector(7 downto 0);
rx: in std_logic;
clk_out: out std_logic);
end entity;
architecture logic_flow of uart_rx is
type state is (start_stop, st0, st1, st2, st3, st4, st5, st6, st7);
signal present_state, next_state: state:=start_stop;
signal clk_9600Hz: std_logic:='0';
signal count: positive range 1 to 5208:=1;
begin
clk_out<=clk_9600Hz;
cdiv: process(clk, rst) -- cdiv means clock divider
begin 
if(rst='1') then 
count<= 1;
elsif(rising_edge(clk)) then
count<=count+1;
if(count=5208) then
clk_9600Hz<=not clk_9600Hz;
count<=1;
end if;
end if;
end process;
p1: process(clk_9600Hz, rst)
begin 
if(rst = '1') then 
present_state<=start_stop;
elsif(rising_edge(clk_9600Hz )) then
present_state<=next_state;
end if;
end process;
p2: process(present_state, rx)
begin
case present_state is
when start_stop => 
if(rx='1') then
next_state<=start_stop;
else
next_state<=st0;
end if;
when st0 =>
outp(0)<=rx;
next_state<=st1;
when st1=>
outp(1)<=rx;
next_state<=st2;
when st2=>
outp(2)<=rx;
next_state<=st3;
when st3=>
outp(3)<=rx;
next_state<=st4;
when st4=>
outp(4)<=rx;
next_state<=st5;
when st5=>
outp(5)<=rx;
next_state<=st6;
when st6=>
outp(6)<=rx;
next_state<=st7;
when st7=>
outp(7)<=rx;
next_state<=start_stop;
end case;
end process;
end logic_flow;
---------------TESTBENCH----------------

library ieee;
use ieee.std_logic_1164.all; 
entity uart_TB is
end uart_TB;
architecture behavior of uart_TB is 
component uart_rx 
    port(   clk, rst: in std_logic;
            outp: out std_logic_vector(7 downto 0);
            rx: in std_logic;
            clk_out: out std_logic);
end component;

 signal clk : std_logic := '0';
 signal rst : std_logic := '1';
 signal rx : std_logic := '1';
 signal clk_out: std_logic;
 signal outp : std_logic_vector(7 downto 0);

constant clk_period : time := 10 ns;
begin

 uut: uart_rx PORT MAP (
clk => clk, 
rst => rst, 
outp => outp,
rx => rx,
clk_out => clk_out
);
-- Clock process definitions 
 clk_process :process
begin
 clk <= '0';
 wait for clk_period/2;
 clk <= '1';
 wait for clk_period/2;
end process;
-- Stimulus process 
 stim_proc: process
begin
wait for 105us;
rst <= '0';
wait for 105us;
rx<='0';
wait for 105us;
rx<='1';
wait for 105us;
rx<='0';
wait for 160us;
rx<='1';
wait for 25us;
rx<='0';
wait for 20us;
wait;
end process;
end;
